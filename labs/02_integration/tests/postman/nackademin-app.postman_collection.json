{
	"info": {
		"_postman_id": "fa1c3d3c-a6c3-4d74-8de9-64285ba0c593",
		"name": "Nackademin App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40906229",
		"_collection_link": "https://www.postman.com/mahta6/workspace/api-testing-automation/collection/40906229-fa1c3d3c-a6c3-4d74-8de9-64285ba0c593?action=share&source=collection_link&creator=40906229"
	},
	"item": [
		{
			"name": "Get Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"\tpm.expect(pm.response.text()).to.include(\"alive\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign Up Admin",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/signup",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign Up User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"signup 200 0r already registered\", ()=> \r",
							"    pm.expect([200, 400]).to.include(pm.response.code)\r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{user_username}}\",\r\n  \"password\": \"{{user_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/signup",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login 2xx\", () => pm.expect(pm.response.code).to.be.within(200,299));\r",
							"let json=null; try{ json=pm.response.json(); }catch(e){}\r",
							"const token  = json?.token || json?.access_token || json?.jwt;\r",
							"pm.expect(token, \"Ingen token i login-svaret\").to.be.ok;\r",
							"const prefix = (json?.token_type || \"Bearer\").trim();\r",
							"\r",
							"// Spara färdig header i *environment* = separata värden för DEV/QA\r",
							"pm.environment.set(\"auth_header_admin\", `${prefix} ${token}`);\r",
							"console.log(\"auth_header_admin:\", pm.environment.get(\"auth_header_admin\"));\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{admin_username}}\",\r\n  \"password\": \"{{admin_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const data = pm.response.json();\r",
							"const token = data.token || data.access_token || data.jwt;\r",
							"pm.environment.set(\"auth_header_user\", `Bearer ${token}`);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{user_username}}\",\r\n  \"password\": \"{{user_password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Given I am an authenticated user \r",
							"pm.test(\"User is authenticated (200)\", ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"}) \r",
							"\r",
							"//When I login into the system\r",
							"\r",
							"const response = pm.response.json();    \r",
							"\r",
							"//then I should see all my products\r",
							"\r",
							"pm.test(\"User has products\", ()=>{\r",
							"    pm.expect(response).to.have.property(\"products\");\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{auth_header_user}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assign product to user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"    pm.expect(pm.response.code).to.eql(200); });\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{auth_header_user}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 5\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unassign product from user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{auth_header_user}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/product/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"product",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"product_id\", response.id);\r",
							"pm.collectionVariables.set(\"product_name\", response.name);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"    pm.expect(pm.response.code).to.eql(200); });\r",
							"\r",
							"console.log(response.id);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{auth_header_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Database Course\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "List products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Given I am admin\r",
							"\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Admin can log in\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('array');\r",
							"});\r",
							"\r",
							"//when I add a product then the product is available\r",
							"\r",
							"\r",
							"const product_id =parseInt (pm.collectionVariables.get(\"product_id\"));\r",
							"const product_name = pm.collectionVariables.get(\"product_name\");\r",
							"console.log(product_id, product_name);\r",
							"\r",
							"\r",
							"pm.test(\"Product list should contain the new product\", () => {\r",
							"    const found = response.some(item => item.id === product_id && item.name === product_name);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": " {{auth_header_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); });"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{auth_header_admin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/product/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"product",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "product_id",
			"value": ""
		},
		{
			"key": "product_name",
			"value": ""
		}
	]
}