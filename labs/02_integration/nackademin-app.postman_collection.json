{
	"info": {
		"_postman_id": "537d90cd-c12e-462f-8495-36e4981001f3",
		"name": "nackademin-app",
		"description": "|  |  |\n| --- | --- |\n|  |  |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40972915",
		"_collection_link": "https://g01test.postman.co/workspace/2405_G01_Test-Workspace~283a20bf-dc8b-4716-9e12-79e358644937/collection/40972915-537d90cd-c12e-462f-8495-36e4981001f3?action=share&source=collection_link&creator=40972915"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response body\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"access_token\", responseJson.access_token);\r",
							"\r",
							"pm.test(\"Status displays 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Access token was given\", function() {\r",
							"    pm.expect(responseJson.access_token).to.be.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend.env}}/login",
					"host": [
						"{{backend.env}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "list products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response body\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"let products = pm.response.json();\r",
							"pm.environment.set(\"oldProductCount\", products.length);\r",
							"\r",
							"pm.test(\"Status displays 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(responseJson).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"At least one product is returned\", function () {\r",
							"    pm.expect(responseJson.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend.env}}/products",
					"host": [
						"{{backend.env}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "create products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response body\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status displays 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains name & ID\", function () {\r",
							"    pm.expect(responseJson.name).to.be.a('string');\r",
							"    pm.expect(responseJson.id).to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Datormus\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend.env}}/products",
					"host": [
						"{{backend.env}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "relist products after create",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let products = pm.response.json();\r",
							"let oldCount = parseInt(pm.environment.get(\"oldProductCount\"));\r",
							"\r",
							"pm.test(\"Product count increased by 1\", function () {\r",
							"    pm.expect(products.length).to.eql(oldCount + 1);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend.env}}/products",
					"host": [
						"{{backend.env}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "list user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response body\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status displays 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Products are returned\", function () {\r",
							"    pm.expect(responseJson.products).to.be.an('array');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend.env}}/user",
					"host": [
						"{{backend.env}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "faulty login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response body\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status displays 401\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful blocked login\", function() {\r",
							"    pm.expect(responseJson.detail).to.equal('Incorrect username or password');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"fell√∂senord\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend.env}}/login",
					"host": [
						"{{backend.env}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "signup",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Function to generate a random username\r",
							"function generateUsername(length) {\r",
							"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
							"    let username = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        username += chars.charAt(Math.floor(Math.random() * chars.length));\r",
							"    }\r",
							"    return username;\r",
							"}\r",
							"\r",
							"// Generate a 10-character username\r",
							"let username = generateUsername(10);\r",
							"\r",
							"// Store it in an environment variable\r",
							"pm.environment.set(\"username\", username);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response body\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"\r",
							"// Validate that ID is a number\r",
							"pm.test(\"ID is a number\", function() {\r",
							"    pm.expect(responseJson.id).to.be.a('number');\r",
							"});\r",
							"\r",
							"// Validate that username is a string\r",
							"pm.test(\"Username is a string\", function() {\r",
							"    pm.expect(responseJson.username).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Validate that products is an array\r",
							"pm.test(\"Products is an array\", function() {\r",
							"    pm.expect(responseJson.products).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Validate that products array is empty\r",
							"pm.test(\"Products is an empty array\", function() {\r",
							"    pm.expect(responseJson.products).to.be.an('array').that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend.env}}/signup",
					"host": [
						"{{backend.env}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		}
	]
}