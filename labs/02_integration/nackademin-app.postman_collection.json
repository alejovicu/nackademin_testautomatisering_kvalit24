{
	"info": {
		"_postman_id": "77e2e31a-b9e5-4a64-beac-44c2fc5acd6d",
		"name": "0 nackademin-app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40968351"
	},
	"item": [
		{
			"name": "log in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Spara token från response till en miljövariabel \"token\"\r",
							"pm.environment.set(\"token\", pm.response.json().access_token);\r",
							"\r",
							"//Check if status code shows 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check that response contains token and that the token is a string (example-code from Chat GPT)\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Access token exists as string\", function() {\r",
							"    pm.expect(jsonData.access_token).to.exist;\r",
							"    pm.expect(jsonData.access_token).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/login",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check if status code shows 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check the response is a list (example-code from Chat GPT)\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response is an array\", function() {\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/products",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "create product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Generera unikt produktnamn (exempelkod från Chat GPT)\r",
							"var timestamp = new Date().getTime();\r",
							"pm.environment.set(\"dynamicName\", \"Testprodukt_\" + timestamp);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check if status code shows 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check that product name that is returned matches what is put in (example-code from Chat GPT)\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Product name matches\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dynamicName\"));\r",
							"});\r",
							"\r",
							"//Check that response has an id (example-code from Chat GPT)\r",
							"pm.test(\"Product ID exists as a number\", function() {\r",
							"    pm.expect(jsonData.id).to.exist;\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{dynamicName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/products",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "products to validate creation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check if status code shows 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check the response is a list (example-code from Chat GPT)\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response is an array\", function() {\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"//Check that added product exists in list (example-code from Chat GPT)\r",
							"let lastAddedName = pm.environment.get(\"dynamicName\");\r",
							"pm.test(\"Product list includes the new product\", function () {\r",
							"    let found = jsonData.some(p => p.name === lastAddedName);\r",
							"    pm.expect(found).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/products",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		}
	]
}