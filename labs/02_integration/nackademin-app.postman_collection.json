{
	"info": {
	  "_postman_id": "nackademin-lab2-collection",
	  "name": "nackademin-app",
	  "description": "Lab 02 Postman collection for dev & qa environments",
	  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
	  {
		"name": "signup",
		"event": [
		  {
			"listen": "prerequest",
			"script": {
			  "exec": [
				"// Generate random username",
				"function generateUsername(length) {",
				"  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
				"  let username = '';",
				"  for (let i = 0; i < length; i++) {",
				"    username += chars.charAt(Math.floor(Math.random() * chars.length));",
				"  }",
				"  return username;",
				"}",
				"let username = generateUsername(8);",
				"pm.environment.set(\"username\", username);",
				"pm.environment.set(\"password\", \"1234\");"
			  ],
			  "type": "text/javascript"
			}
		  },
		  {
			"listen": "test",
			"script": {
			  "exec": [
				"let res = pm.response.json();",
				"pm.test(\"Signup returns id\", function() { pm.expect(res.id).to.be.a('number'); });",
				"pm.test(\"Username matches\", function() { pm.expect(res.username).to.be.a('string'); });",
				"pm.test(\"Products is empty array\", function() { pm.expect(res.products).to.be.an('array').that.is.empty; });"
			  ],
			  "type": "text/javascript"
			}
		  }
		],
		"request": {
		  "method": "POST",
		  "header": [],
		  "body": {
			"mode": "raw",
			"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
		  },
		  "url": {
			"raw": "{{backend.env}}/signup",
			"host": ["{{backend.env}}"],
			"path": ["signup"]
		  }
		}
	  },
	  {
		"name": "login",
		"event": [
		  {
			"listen": "test",
			"script": {
			  "exec": [
				"let data = pm.response.json();",
				"pm.environment.set(\"token\", data.access_token);",
				"pm.test(\"Got access token\", function () {",
				"  pm.expect(data).to.have.property(\"access_token\");",
				"});"
			  ],
			  "type": "text/javascript"
			}
		  }
		],
		"request": {
		  "method": "POST",
		  "header": [],
		  "body": {
			"mode": "raw",
			"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
		  },
		  "url": {
			"raw": "{{backend.env}}/login",
			"host": ["{{backend.env}}"],
			"path": ["login"]
		  }
		}
	  },
	  {
		"name": "get user",
		"event": [
		  {
			"listen": "test",
			"script": {
			  "exec": [
				"let res = pm.response.json();",
				"pm.test(\"User is authenticated\", function () { pm.expect(res.username).to.be.a('string'); });",
				"pm.test(\"Products field exists\", function () { pm.expect(res).to.have.property('products'); });"
			  ],
			  "type": "text/javascript"
			}
		  }
		],
		"request": {
		  "method": "GET",
		  "header": [
			{ "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
		  ],
		  "url": {
			"raw": "{{backend.env}}/user",
			"host": ["{{backend.env}}"],
			"path": ["user"]
		  }
		}
	  },
	  {
		"name": "get products",
		"event": [
		  {
			"listen": "test",
			"script": {
			  "exec": [
				"pm.test(\"Products is an array\", function () {",
				"  pm.expect(pm.response.json()).to.be.an('array');",
				"});"
			  ],
			  "type": "text/javascript"
			}
		  }
		],
		"request": {
		  "method": "GET",
		  "header": [
			{ "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
		  ],
		  "url": {
			"raw": "{{backend.env}}/products",
			"host": ["{{backend.env}}"],
			"path": ["products"]
		  }
		}
	  },
	  {
		"name": "add product",
		"event": [
		  {
			"listen": "test",
			"script": {
			  "exec": [
				"let res = pm.response.json();",
				"pm.test(\"Product has id\", function() { pm.expect(res).to.have.property('id'); });",
				"pm.test(\"Product has name\", function() { pm.expect(res).to.have.property('name'); });"
			  ],
			  "type": "text/javascript"
			}
		  }
		],
		"request": {
		  "method": "POST",
		  "header": [
			{ "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
		  ],
		  "body": {
			"mode": "raw",
			"raw": "{\n  \"name\": \"TestProduct\"\n}"
		  },
		  "url": {
			"raw": "{{backend.env}}/products",
			"host": ["{{backend.env}}"],
			"path": ["products"]
		  }
		}
	  }
	]
  }
  