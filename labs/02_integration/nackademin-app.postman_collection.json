{
	"info": {
		"_postman_id": "ed88e15a-0000-40f0-b18f-bfaf3c925b0e",
		"name": "QA Enviorment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32096461",
		"_collection_link": "https://backend-and-frontend-in-api-testing.postman.co/workspace/31977f18-671d-4103-be21-9e550bc90e31/collection/32096461-ed88e15a-0000-40f0-b18f-bfaf3c925b0e?action=share&source=collection_link&creator=32096461"
	},
	"item": [
		{
			"name": "Given I am an authenticated user​",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateUsername(length) {\r",
							"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
							"    let usernameQA = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        usernameQA += chars.charAt(Math.floor(Math.random() * chars.length));\r",
							"    }\r",
							"    return usernameQA;\r",
							"}\r",
							"\r",
							"// Generate a 10-character username\r",
							"let usernameQA = generateUsername(10);\r",
							"\r",
							"// Store it in an environment variable\r",
							"pm.environment.set(\"USERNAME_QA\", usernameQA);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is not 401\", function () {\r",
							"    pm.expect(pm.response.code).not.equal(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).not.equal(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Check if 'id' is an integer\", function () {\r",
							"    var responseJson = pm.response.json();  // Parse the response body\r",
							"    var id = responseJson.id;  // Extract the 'id' field from the response\r",
							"    \r",
							"    pm.expect(id).to.be.a('number');  // Assert that 'id' is a number\r",
							"    pm.expect(Number.isInteger(id)).to.be.true;  // Assert that 'id' is an integer\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{USERNAME_QA}}\",\r\n  \"password\": \"{{QA_PASSWORD}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL_QA}}/signup",
					"host": [
						"{{URL_QA}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "When i login to the application",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is not 401\", function () {",
							"    pm.expect(pm.response.code).equal(200);",
							"});",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).not.equal(401);",
							"});",
							"",
							"var json = pm.response.json();",
							"",
							"// Store it in an environment variable",
							"pm.environment.set(\"TOKEN\", json.access_token);",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(pm.response.text()).to.not.be.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{USERNAME_QA}}\",\n    \"password\": \"{{QA_PASSWORD}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL_QA}}/login",
					"host": [
						"{{URL_QA}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Then I should see all my products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).not.equal(409);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(pm.response.text()).to.not.be.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL_QA}}/user",
					"host": [
						"{{URL_QA}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Given I am admin user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is not 401\", function () {",
							"    pm.expect(pm.response.code).equal(200);",
							"});",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).not.equal(401);",
							"});",
							"",
							"var json = pm.response.json();",
							"",
							"// Store it in an environment variable",
							"pm.environment.set(\"TOKEN\", json.access_token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{USERNAME_QA}}\",\n    \"password\": \"{{QA_PASSWORD}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL_QA}}/login",
					"host": [
						"{{URL_QA}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "When I add a product to the catalog​",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).not.to.equal(401);",
							"});",
							"",
							"pm.test(\"Response status code is not 400\", function () {",
							"    pm.expect(pm.response.code).not.equal(400);",
							"});",
							"",
							"pm.test(\"Check if 'productid' is an integer\", function () {",
							"    var responseJson = pm.response.json();  // Parse the response body",
							"    var id = responseJson.id;  // Extract the 'id' field from the response",
							"    ",
							"    pm.expect(id).to.be.a('number');  // Assert that 'id' is a number",
							"    pm.expect(Number.isInteger(id)).to.be.true;  // Assert that 'id' is an integer",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Cola\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL_QA}}/products",
					"host": [
						"{{URL_QA}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Then The product is available to be used in the app",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// validate that list of products in store is not empty ",
							"",
							"pm.test(\"List is not empty\", function () {",
							"    var list = pm.response.json();  // assuming the response is a JSON array",
							"    pm.expect(list.length).not.to.eql(0);",
							"});",
							"",
							"",
							"// Validate that the status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"// Validate the response content-type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"// Validate that the response is an array",
							"pm.test(\"Response is an array\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('array');",
							"});",
							"",
							"// Validate each product in the response has a name and an id",
							"pm.test(\"Each product should have a name and an id\", function () {",
							"    const responseJson = pm.response.json();",
							"    responseJson.forEach(product => {",
							"        pm.expect(product).to.have.property('name');",
							"        pm.expect(product.name).to.be.a('string');",
							"        pm.expect(product).to.have.property('id');",
							"        pm.expect(product.id).to.be.a('number');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Cola\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL_QA}}/products",
					"host": [
						"{{URL_QA}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		}
	]
}