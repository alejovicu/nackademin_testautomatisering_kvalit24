{
	"info": {
		"_postman_id": "d3fcc272-8031-4c57-80f5-b139e6b3a48d",
		"name": "Nackademin-application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41007014"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"let body = {};\r",
							"try { body = pm.response.json(); } catch(e) { body = {}; }\r",
							"const token = body.access_token;\r",
							"pm.test(\"Has token\", function () {\r",
							"  pm.expect(token).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"pm.expect(token.length).to.be.greaterThan(10); // sanity check length\r",
							"pm.environment.set(\"TOKEN\", token);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"{{USERNAME}}\", \"password\": \"{{PASSWORD}}\" }\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
							"const u = pm.response.json();\r",
							"const list = u.products;\r",
							"pm.test(\"Has product list (array)\", () => pm.expect(list).to.be.an(\"array\"));\r",
							"pm.environment.set(\"products_count_before\", list.length); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/user",
					"host": [
						"{{URL}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Creating a product in the catalog should succeed\r",
							"pm.test(\"Created (200/201)\", () => pm.expect([200,201]).to.include(pm.response.code));\r",
							"\r",
							"// Parse response body\r",
							"const p = pm.response.json();\r",
							"\r",
							"//Capture product info for next step\r",
							"pm.environment.set(\"created_product_id\", p.id);\r",
							"pm.environment.set(\"created_product_name\", p.name);\r",
							"\r",
							"//Basic shape checks\r",
							"pm.test(\"Product has id\", () => pm.expect(pm.environment.get(\"created_product_id\")).to.exist);\r",
							"pm.test(\"Product has name\", () => pm.expect(pm.environment.get(\"created_product_name\")).to.be.a(\"string\")); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/products",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
							"\r",
							"const list = pm.response.json();\r",
							"pm.test(\"Catalog is an array\", () => pm.expect(list).to.be.an(\"array\"));\r",
							"\r",
							"const createdName = pm.environment.get(\"created_product_name\");\r",
							"const createdId   = pm.environment.get(\"created_product_id\");\r",
							"\r",
							"// Verify that the newly created product is available in the app (present in the catalog)\r",
							"const found = list.some(x =>\r",
							"  (createdId && (x.id == createdId || x.product_id == createdId || x.guid == createdId)) ||\r",
							"  (createdName && (x.name === createdName || x.title === createdName))\r",
							");\r",
							"\r",
							"pm.test(\"New product is available in the app (present in catalog)\", () => pm.expect(found).to.be.true);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		}
	]
}