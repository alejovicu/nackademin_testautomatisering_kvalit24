{
	"info": {
		"_postman_id": "f0babc50-b708-464e-b826-77df164b6549",
		"name": "nackademin-app",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "41006894"
	},
	"item": [
		{
			"name": "Create_admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"{\r",
							"    let responseJson = pm.response.json();\r",
							"\r",
							"    // Validate that ID is a number,\r",
							"    pm.test(\"ID is a number\", function () {\r",
							"        pm.expect(responseJson.id).to.be.a('number');\r",
							"    });\r",
							"\r",
							"    // Validate that username is a string\r",
							"    pm.test(\"Username is a string\", function () {\r",
							"        pm.expect(responseJson.username).to.be.a('string');\r",
							"    });\r",
							"\r",
							"    // Validate that products is an array\r",
							"    pm.test(\"Products is an array\", function () {\r",
							"        pm.expect(responseJson.products).to.be.an('array');\r",
							"    });\r",
							"\r",
							"    // Validate that products array is empty\r",
							"    pm.test(\"Products is an empty array\", function () {\r",
							"        pm.expect(responseJson.products).to.be.an('array').that.is.empty;\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{admin_user}}\",\r\n  \"password\": \"{{admin_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{backend.env}}/signup"
			},
			"response": []
		},
		{
			"name": "Create_user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"{\r",
							"    // Function to generate a random username\r",
							"        function generateUsername(length) {\r",
							"            const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
							"            let username = '';\r",
							"            for (let i = 0; i < length; i++) {\r",
							"                username += chars.charAt(Math.floor(Math.random() * chars.length));\r",
							"            }\r",
							"            return username;\r",
							"        }\r",
							"   // Generate a 10-character username\r",
							"        let username = generateUsername(10);\r",
							"    // Store it in an environment variable\r",
							"        pm.environment.set(\"username\", username);\r",
							"\r",
							"    // Function to generate a random password\r",
							"        function generatePassword(length) {\r",
							"            const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
							"            let password = '';\r",
							"            for (let i = 0; i < length; i++) {\r",
							"                password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
							"            }\r",
							"            return password;\r",
							"        }\r",
							"    // Generate a 10-character password\r",
							"        let password = generatePassword(8);\r",
							"    // Store it in an environment variable\r",
							"        pm.environment.set(\"password\", password);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"{\r",
							"    let responseJson = pm.response.json();\r",
							"\r",
							"    // Validate that ID is a number,\r",
							"    pm.test(\"ID is a number\", function () {\r",
							"        pm.expect(responseJson.id).to.be.a('number');\r",
							"    });\r",
							"\r",
							"    // Validate that username is a string\r",
							"    pm.test(\"Username is a string\", function () {\r",
							"        pm.expect(responseJson.username).to.be.a('string');\r",
							"    });\r",
							"\r",
							"    // Validate that products is an array\r",
							"    pm.test(\"Products is an array\", function () {\r",
							"        pm.expect(responseJson.products).to.be.an('array');\r",
							"    });\r",
							"\r",
							"    // Validate that products array is empty\r",
							"    pm.test(\"Products is an empty array\", function () {\r",
							"        pm.expect(responseJson.products).to.be.an('array').that.is.empty;\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{backend.env}}/signup"
			},
			"response": []
		},
		{
			"name": "Login_admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//plocka upp nyckeln fÃ¶r admin.\r",
							"{\r",
							"    let responseJson = pm.response.json();\r",
							"\r",
							"    // Validate that the access token is a string,\r",
							"    pm.test(\"Access token is a string.\", function () {\r",
							"        pm.expect(responseJson.access_token).to.be.a('string');\r",
							"    });\r",
							"\r",
							"    // Validate that the berer token is a string\r",
							"    pm.test(\"Berer token is a string.\", function () {\r",
							"        pm.expect(responseJson.token_type).to.be.a('string');\r",
							"    });\r",
							"\r",
							"    pm.environment.set(\"admin_token\", responseJson.access_token)\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{admin_user}}\",\r\n  \"password\": \"{{admin_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{backend.env}}/login"
			},
			"response": []
		},
		{
			"name": "List products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"{\r",
							"    let responseJson = pm.response.json();\r",
							"    pm.environment.set(\"product_list\", responseJson)\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{backend.env}}/products"
			},
			"response": []
		},
		{
			"name": "Admin_add_product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//kolla om produkten har laggts till.\r",
							"let responseJson = pm.response.json();    \r",
							"    pm.test(\"Products is not an empty string\", function () {\r",
							"        pm.expect(responseJson.name).to.be.a('string').that.is.not.empty;\r",
							"    });\r",
							" \r",
							"    pm.test(\"Products is not an empty number\", function () {\r",
							"        pm.expect(responseJson.id).to.be.a('number');\r",
							"    });\r",
							"\r",
							"    pm.environment.set(\"product_id\", responseJson.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{admin_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"product\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{backend.env}}/products"
			},
			"response": []
		},
		{
			"name": "Login_user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"{\r",
							"    let responseJson = pm.response.json();\r",
							"\r",
							"    // Validate that the access token is a string,\r",
							"    pm.test(\"Access token is a string.\", function () {\r",
							"        pm.expect(responseJson.access_token).to.be.a('string');\r",
							"    });\r",
							"\r",
							"    // Validate that the berer token is a string\r",
							"    pm.test(\"Berer token is a string.\", function () {\r",
							"        pm.expect(responseJson.token_type).to.be.a('string');\r",
							"    });\r",
							"\r",
							"    pm.environment.set(\"user_token\", responseJson.access_token)\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{backend.env}}/login"
			},
			"response": []
		},
		{
			"name": "Add_product_to_user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{user_token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{backend.env}}/user/products/{{product_id}}"
			},
			"response": []
		},
		{
			"name": "Get_user_with_products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"{\r",
							"    let responseJson = pm.response.json();\r",
							"\r",
							"    // Validate that ID is a number,\r",
							"    pm.test(\"ID is a number\", function () {\r",
							"        pm.expect(responseJson.id).to.be.a('number');\r",
							"    });\r",
							"\r",
							"    // Validate that username is a string\r",
							"    pm.test(\"Username is a string\", function () {\r",
							"        pm.expect(responseJson.username).to.be.a('string');\r",
							"    });\r",
							"\r",
							"    // Validate that products is an array\r",
							"    pm.test(\"Products is an array\", function () {\r",
							"        pm.expect(responseJson.products).to.be.an('array');\r",
							"    });\r",
							"\r",
							"    // Validate that products array is empty\r",
							"    pm.test(\"Products is an array containing items\", function () {\r",
							"        pm.expect(responseJson.products).to.be.an('array').that.is.not.empty;\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{user_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{backend.env}}/user"
			},
			"response": []
		},
		{
			"name": "User_list_products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseJson = pm.response.json();    \r",
							"    pm.test(\"Products is an array containing items\", function () {\r",
							"        pm.expect(responseJson).to.be.an('array').that.is.not.empty;\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{user_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{backend.env}}/products"
			},
			"response": []
		}
	]
}